Custom Workflows can be created based on specific conditions to customize the 
development process in unique and creative ways

Examples of event-driven workflows include automatically running tests when code is
pushed or automatically deploying a new version of software when a new release is 
created

Github actions can build, test, and deploy Docker Containers from within your 
repository. It is like having your own shipping container port right in your codebase

Docker and Github actions ensure that your code runs consistently, no matter where it 
is deployed

MarketPlace:
    - GitHub Actions MarketPlace contains plethora of useful actions for automating 
    workflows
    - You can find actions for almost everything, from running tests to deploying 
    code to the cloud
    - Developers are constantly creating new actions and sharing them with the 
    community, so there's always something to try

You can share custom actions with others in the Github community or keep them private
for use within your team

Security and Compliance:
    - Built in security features like secrets management, automatic security updates and
    code scanning keep code safe
    - Third party security tools like Snyk and SonarCloud work with Github's 
    security features 
    - Compliance features like access control, audit logging and policy enforcement are
    like a strict but fair teacher watching your code

Insight and Analytics:
    - It make workflows better as it measures the performance and success of your 
    workflows with insights
    - Get valuable insights into what's working and what's not
    - It tells which workflow needs improvement
    - See job time, failures and resource intensive tasks with insights
    - Optimize workflow and make them run smoothly with insights

GitHub Events:
    - Triggers for running tests, deploying code or sending notifications to team
    members
    - Trigger Events:
        - Pull Request:
            - when pull request is opened or updated in a repository
            - it indicates that changes are ready for review and merging
        - Push:
            - when code is pushed to a repository
            - Either through commit or branch update
        - Issue:
            - when an issue is opened or updated in a repository
            - indicates that there is a problem or feature request is that needs to be
            addressed
        - Pull Request Review:
            - When a review is submitted on a pull request 
            - indicates that the changes have been reviewed and approved or rejected
        - Repository Dispatch:
            - When a custom webhook is triggered by a repository
        - Pull Request Review comment:
            - When a comment is made on a review of a pull request
        - Issue Comment:
            - When a comment is made on a issue
        - Workflow Run:
            - When a workflow is manually triggered or when it is triggered by another
            event in the workflow
        - Release:
            - When a new release is published in the repository

Benefits of using Matrix and Parallel Strategies:
    - Saves a lot of time with lighting fast builds
    - More flexible and adaptable

Set Up Matrix Strategies:
    - Define your Matrix
    - Specify your strategy
    - Use the matrix

Best Practices and Tips on Matrix:
    - Keep it simple
    - Use Environment Variables
    - Test Locally
    - Use Parallelism
    - Keep an eye on resource usage

Secrets:
    - They are like secret vault which only authorized personnel can access
    - Grant access to repository secrets only to those who need it to ensure their 
    safety and security
    - The secrets context injects your secrets into the environment variables of the 
    runner, making them available to your workflow
    - Once your store your secrets, reference them in your workflow file using 
    ${{ secrets.SECRET_NAME }} syntax
    - If your secrets does not work, ensure that you have the correct permissions and 
    access to the repository

Composite Runs:
    - keep your code clean and tidy
    - Reference the other workflows (using the "uses" keyword)
    - It helps to manage multiple workflows with ease
    - Plan your composite run carefully avoiding overloading
    - Composite runs can be complex and difficult to debug and can be limited by
    the number of available resources on your runner

Build Caching:
    - Decide what type of build caching to use:
        - Local Build Caching
        - Remote Build Caching
        - Cloud Build Caching
    - Only cache the files and directories that actually need
    - Regularly clean out your cache
    - Test your build   caching thoroughly before relying on it for your entire
    workflow
    - It can be tricky to set up and configure correctly
